# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'datamgr.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import *
import matplotlib.pyplot as plt
import numpy as np
import win32com.client as win32
import csv
import shutil
import MessageBox
import gas_rc
import sqlite3
import itertools

class Ui_DataWindow(object):

    #Block1 Open and Load from SQLite Database
    #https://www.codegrepper.com/code-examples/python/open+file+dialog+on+button+click+pyqt5
    #Crashing on Cancel : https://stackoverflow.com/questions/56450648/qfiledialog-crashing-on-cancel
    #Crashing on Cancel : https://stackoverflow.com/questions/52536505/why-there-is-error-on-cancel-qfiledialog

    #Code From Youtube 'PyQt : Show Data Into QTableWidget From Database. Ssj6 Channel'
    def OpenData(self): 
        path, filter = QtWidgets.QFileDialog.getOpenFileName(None, "Open Database", '', "Database Files (*.db)")
        if path:
            connection = sqlite3.connect(path)
            query = "SELECT * FROM FuelManagement"
            result = connection.execute(query)
            self.tableWidget.setRowCount(0)

            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, column_data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(column_data)))

            self.status.setText("Reading File : " + path)
            connection.close()
            #END

    #Tutorial : https://www.youtube.com/watch?v=55kQL-42Nzo
    def ExportExcel(self):
        xlApp = win32.Dispatch("Excel.Application")
        xlApp.Visible = True

        #Create a new excel workbook
        wb = xlApp.Workbooks.Add()

        #Create a new excel worksheet
        ws = wb.worksheets.add
        ws.name = "Record Data"

        rows = []
        columnheaders = []

        #Retrieve columns lable
        try:
            for j in range(self.tableWidget.model().columnCount()):
                columnheaders.append(self.tableWidget.horizontalHeaderItem(j).text())

        #Retrieve table content
            for row in range(self.tableWidget.rowCount()):
                record = []
                for col in range(self.tableWidget.columnCount()):
                    record.append(self.tableWidget.item(row, col).text())
                rows.append(record)

        #insert table content to Excel
            ws.Range(
                ws.cells(2, 1),
                ws.cells(len(rows)+1, len(columnheaders))
                ).value = rows

        #insert column labels to Excel
            ws.Range(
                ws.cells(1, 1),
                ws.cells(1, len(columnheaders))
                ).value = columnheaders

        except Exception as e:
            print (e)
            MessageBox.noData()
            #END

    #Tutorial : https://stackoverflow.com/questions/49259680/exporting-as-csv-fits-entirely-in-first-cell
    def ExportCSV(self):
        path = QtWidgets.QFileDialog.getSaveFileName(None, "Save CSV", '', "CSV Files (*.csv)")
        if path[0] != '':
            with open(path[0], 'w') as csv_file:
                writer = csv.writer(csv_file, dialect = "excel", delimiter = ';')
                try:
                    for row in range(self.tableWidget.rowCount()):
                        row_data = []
                        for column in range(self.tableWidget.columnCount()):
                            item = self.tableWidget.item(row, column)
                            row_data.append(item.text())
                        writer.writerow(row_data)
                        
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setText("CSV Files is Created!")
                    msg.setIcon(QMessageBox.Information)
                    x = msg.exec_()

                except Exception as e:
                    print (e)
                    MessageBox.noData()
                    #END

    def setupUi(self, DataWindow):
        DataWindow.setObjectName("DataWindow")
        DataWindow.resize(800, 600)
        DataWindow.setMinimumSize(QtCore.QSize(800, 600))
        DataWindow.setMaximumSize(QtCore.QSize(800, 600))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon/FuelIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        DataWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(DataWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.GasStation = QtWidgets.QLabel(self.centralwidget)
        self.GasStation.setGeometry(QtCore.QRect(350, 240, 511, 421))
        self.GasStation.setStyleSheet("image: url(:/newPrefix/GasStation.png);")
        self.GasStation.setText("")
        self.GasStation.setObjectName("GasStation")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(-10, 490, 821, 91))
        self.graphicsView.setStyleSheet("background-color: rgb(113, 95, 116);")
        self.graphicsView.setObjectName("graphicsView")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(70, 10, 361, 31))
        self.label_3.setStyleSheet("font: 16pt \"MS Shell Dlg 2\";")
        self.label_3.setObjectName("label_3")
        self.graphicsView_2 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_2.setGeometry(QtCore.QRect(0, 490, 801, 16))
        self.graphicsView_2.setStyleSheet("background-color: rgb(173, 213, 144);")
        self.graphicsView_2.setObjectName("graphicsView_2")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(20, 50, 621, 311))
        self.tableWidget.setRowCount(8)
        self.tableWidget.setColumnCount(12)
        self.tableWidget.setObjectName("tableWidget")
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(11, item)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 10, 41, 31))
        self.label.setStyleSheet("image: url(:/newPrefix/icon/databaseIcon.png);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.status = QtWidgets.QLabel(self.centralwidget)
        self.status.setGeometry(QtCore.QRect(10, 510, 491, 16))
        self.status.setStyleSheet("color: rgb(255, 255, 255);")
        self.status.setObjectName("status")
        self.LoadButton = QtWidgets.QPushButton(self.centralwidget)
        self.LoadButton.setGeometry(QtCore.QRect(660, 50, 121, 51))
        self.LoadButton.setMinimumSize(QtCore.QSize(121, 51))
        self.LoadButton.setMaximumSize(QtCore.QSize(121, 51))
        self.LoadButton.setObjectName("LoadButton")
        self.delButton = QtWidgets.QPushButton(self.centralwidget)
        self.delButton.setGeometry(QtCore.QRect(660, 110, 121, 51))
        self.delButton.setMinimumSize(QtCore.QSize(121, 51))
        self.delButton.setMaximumSize(QtCore.QSize(121, 51))
        self.delButton.setObjectName("delButton")
        self.backupButton = QtWidgets.QPushButton(self.centralwidget)
        self.backupButton.setGeometry(QtCore.QRect(660, 170, 121, 51))
        self.backupButton.setMinimumSize(QtCore.QSize(121, 51))
        self.backupButton.setMaximumSize(QtCore.QSize(121, 51))
        self.backupButton.setObjectName("backupButton")
        self.graphicsView.raise_()
        self.label_3.raise_()
        self.graphicsView_2.raise_()
        self.GasStation.raise_()
        self.tableWidget.raise_()
        self.label.raise_()
        self.status.raise_()
        self.LoadButton.raise_()
        self.delButton.raise_()
        self.backupButton.raise_()
        DataWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(DataWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuSave_As = QtWidgets.QMenu(self.menuFile)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icon/SaveIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menuSave_As.setIcon(icon1)
        self.menuSave_As.setObjectName("menuSave_As")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        DataWindow.setMenuBar(self.menubar)
        self.actionAbout = QtWidgets.QAction(DataWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icon/AboutIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAbout.setIcon(icon2)
        self.actionAbout.setObjectName("actionAbout")
        self.actionClear = QtWidgets.QAction(DataWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icon/ClearIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClear.setIcon(icon3)
        self.actionClear.setObjectName("actionClear")
        self.actionSave = QtWidgets.QAction(DataWindow)
        self.actionSave.setIcon(icon1)
        self.actionSave.setObjectName("actionSave")
        self.actionTo_xlsx = QtWidgets.QAction(DataWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icon/xlsxIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionTo_xlsx.setIcon(icon4)
        self.actionTo_xlsx.setObjectName("actionTo_xlsx")
        self.actionTo_csv = QtWidgets.QAction(DataWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icon/csvIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionTo_csv.setIcon(icon5)
        self.actionTo_csv.setObjectName("actionTo_csv")
        self.actionClose = QtWidgets.QAction(DataWindow)
        self.actionClose.setObjectName("actionClose")
        self.actionNew = QtWidgets.QAction(DataWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("icon/NewIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionNew.setIcon(icon6)
        self.actionNew.setObjectName("actionNew")
        self.actionMain_Program = QtWidgets.QAction(DataWindow)
        self.actionMain_Program.setIcon(icon)
        self.actionMain_Program.setObjectName("actionMain_Program")
        self.actionOpen = QtWidgets.QAction(DataWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("icon/open.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpen.setIcon(icon7)
        self.actionOpen.setObjectName("actionOpen")
        self.actionRemove = QtWidgets.QAction(DataWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("icon/deleteIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionRemove.setIcon(icon9)
        self.actionRemove.setObjectName("actionRemove")
        self.actionRelease_Notes = QtWidgets.QAction(DataWindow)
        self.actionRelease_Notes.setIcon(icon6)
        self.actionRelease_Notes.setObjectName("actionRelease_Notes")
        self.actionBackup = QtWidgets.QAction(DataWindow)
        self.actionBackup.setIcon(icon1)
        self.actionBackup.setObjectName("actionBackup")
        self.actionDelete_History = QtWidgets.QAction(DataWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("icon/exitIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDelete_History.setIcon(icon10)
        self.actionDelete_History.setObjectName("actionDelete_History")
        self.actionLoad_History = QtWidgets.QAction(DataWindow)
        self.actionLoad_History.setIcon(icon7)
        self.actionLoad_History.setObjectName("actionLoad_History")
        self.menuSave_As.addAction(self.actionTo_xlsx)
        self.menuSave_As.addAction(self.actionTo_csv)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionBackup)
        self.menuFile.addAction(self.menuSave_As.menuAction())
        self.menuFile.addAction(self.actionClose)
        self.menuHelp.addAction(self.actionAbout)
        self.menuHelp.addAction(self.actionRelease_Notes)
        self.menuEdit.addAction(self.actionRemove)
        self.menuEdit.addAction(self.actionDelete_History)
        self.menuEdit.addAction(self.actionLoad_History)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(DataWindow)
        QtCore.QMetaObject.connectSlotsByName(DataWindow)

        #Block2 คำสั่งปุ่ม RefreshButton, About, Exit
        #Code From Youtube PyQt : Show Data Into QTableWidget From Database. Ssj6 Channel   
        self.LoadButton.clicked.connect(self.showData) #คำสั่งปุ่ม Load Data
        self.actionLoad_History.triggered.connect(self.showData) #คำสั่งเมนู Load Data
        self.backupButton.clicked.connect(self.saveData) #คำสั่งปุ่ม Backup
        self.actionBackup.triggered.connect(self.saveData) #คำสั่งเมนู Backup
        self.actionTo_xlsx.triggered.connect(self.ExportExcel) #คำสั่งเมนู Export to xlsx
        self.actionTo_csv.triggered.connect(self.ExportCSV) #คำสั่งเมนู Export to csv
        self.actionOpen.triggered.connect(self.OpenData) #คำสั่งเมนู Open
        self.actionAbout.triggered.connect(self.showAbout) #About
        self.actionRemove.triggered.connect(self.removeRow) #Remove Last Rows
        self.delButton.clicked.connect(self.clearData) #คำสั่งปุ่ม Delete History
        self.actionDelete_History.triggered.connect(self.clearData) #คำสั่งเมนู Delete History
        self.actionClose.triggered.connect(self.showExit) #Exit
        self.actionRelease_Notes.triggered.connect(self.releaseNote)

    def showExit(self):
        MessageBox.showExit()

    def clearData(self):
        MessageBox.clearData()
        QtCore.QTimer.singleShot(100, self.showData)   #Refresh Data every 10 sec.

    def saveData(self):
        try:
            path = QtWidgets.QFileDialog.getSaveFileName(None, "Backup Current Table", '', "Database Files (*.db)")
            if path:
                shutil.copy("db/myDB.db", path[0])
                MessageBox.backupDB()
        except Exception as e:
            print (e)

    def removeRow(self):
        connection = sqlite3.connect("db/myDB.db")
        query = """DELETE FROM FuelManagement
                   WHERE Dated = (SELECT Dated FROM FuelManagement
                                 ORDER BY Dated DESC
                                 LIMIT 1)"""
        connection.execute(query)
        connection.commit()
        connection.close()
        QtCore.QTimer.singleShot(100, self.showData)

        #โค้ดลบตาราง QTableWidget ที่เลือก
        #selected = self.tableWidget.currentRow()
        #self.tableWidget.removeRow(selected)

    def showData(self): 
        connection = sqlite3.connect("db/myDB.db")
        query = "SELECT * FROM FuelManagement"
        result = connection.execute(query)
        self.tableWidget.setRowCount(0)

        for row_number, row_data in enumerate(result):
            self.tableWidget.insertRow(row_number)
            for column_number, column_data in enumerate(row_data):
                self.tableWidget.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(column_data)))

        self.status.setText("Reading File : db/myDB.db")
        connection.close()

    def showAbout(self):
        MessageBox.showAbout()

    def releaseNote(self):  #Open Release Notes
        from releasenote import Ui_MainWindow
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def retranslateUi(self, DataWindow):
        _translate = QtCore.QCoreApplication.translate
        DataWindow.setWindowTitle(_translate("DataWindow", "Fuel Management - Data Manager"))
        self.label_3.setText(_translate("DataWindow", "Fuel Management - Data Manager"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("DataWindow", "วันที่"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("DataWindow", "ชนิดน้ำมัน"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("DataWindow", "ปั้ม"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("DataWindow", "ราคาบาท/ลิตร"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("DataWindow", "เงินที่จ่าย"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("DataWindow", "กิโลเมตรเริ่ม"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("DataWindow", "กิโลเมตรสิ้นสุด"))
        item = self.tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("DataWindow", "น้ำมันที่ได้รับ(ลิตร)"))
        item = self.tableWidget.horizontalHeaderItem(8)
        item.setText(_translate("DataWindow", "ระยะทางที่วิ่ง"))
        item = self.tableWidget.horizontalHeaderItem(9)
        item.setText(_translate("DataWindow", "กม./ลิตร"))
        item = self.tableWidget.horizontalHeaderItem(10)
        item.setText(_translate("DataWindow", "ลิตร/100กม."))
        item = self.tableWidget.horizontalHeaderItem(11)
        item.setText(_translate("DataWindow", "บาท/กม."))
        self.status.setText(_translate("DataWindow", "Reading File :"))
        self.LoadButton.setToolTip(_translate("DataWindow", "<html><head/><body><p>เลือกฐานข้อมูล</p></body></html>"))
        self.LoadButton.setText(_translate("DataWindow", "Load History"))
        self.delButton.setToolTip(_translate("DataWindow", "<html><head/><body><p>เลือกฐานข้อมูล</p></body></html>"))
        self.delButton.setText(_translate("DataWindow", "Delete History"))
        self.backupButton.setToolTip(_translate("DataWindow", "<html><head/><body><p>เลือกฐานข้อมูล</p></body></html>"))
        self.backupButton.setText(_translate("DataWindow", "Backup..."))
        self.menuFile.setTitle(_translate("DataWindow", "File"))
        self.menuSave_As.setTitle(_translate("DataWindow", "Export"))
        self.menuHelp.setTitle(_translate("DataWindow", "Help"))
        self.menuEdit.setTitle(_translate("DataWindow", "Edit"))
        self.actionAbout.setText(_translate("DataWindow", "About"))
        self.actionClear.setText(_translate("DataWindow", "Clear"))
        self.actionSave.setText(_translate("DataWindow", "Save"))
        self.actionTo_xlsx.setText(_translate("DataWindow", "Export to .xlsx"))
        self.actionTo_csv.setText(_translate("DataWindow", "Export to .csv"))
        self.actionClose.setText(_translate("DataWindow", "Close"))
        self.actionNew.setText(_translate("DataWindow", "New"))
        self.actionMain_Program.setText(_translate("DataWindow", "Main Program"))
        self.actionOpen.setText(_translate("DataWindow", "Open..."))
        self.actionRemove.setText(_translate("DataWindow", "Remove Last Row (Undo)"))
        self.actionRelease_Notes.setText(_translate("DataWindow", "Release Notes"))
        self.actionBackup.setText(_translate("DataWindow", "Backup..."))
        self.actionDelete_History.setText(_translate("DataWindow", "Delete History"))
        self.actionLoad_History.setText(_translate("DataWindow", "Load History"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    DataWindow = QtWidgets.QMainWindow()
    ui = Ui_DataWindow()
    ui.setupUi(DataWindow)
    DataWindow.show()
    sys.exit(app.exec_())
