# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'translatev101.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from googletrans import Translator
import win32com.client as win32
import MessageBox
import image_rcv101
import shutil
import sqlite3


class Ui_MainWindow(object):


    #File --> Open
    def openData(self): 
        path, filter = QtWidgets.QFileDialog.getOpenFileName(None, "Open Database", '', "Database Files (*.db)")
        if path:
            connection = sqlite3.connect(path)
            query = "SELECT * FROM History"
            result = connection.execute(query)
            self.tableWidget.setRowCount(0)

            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, column_data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(column_data)))

            header = ["id", "Date", "English", "Translated"]
            self.tableWidget.setHorizontalHeaderLabels(header)
            self.status.setText("Reading File : " + path)
            connection.close()
    #END##########################################################################################################


    #Save --> Add data to db
    #Tutorial : stackabuse.com/how-to-copy-a-file-in-python/
    def saveData(self):
        try:
            path = QtWidgets.QFileDialog.getSaveFileName(None, "Backup Current Table", '', "Database Files (*.db)")
            if path:
                shutil.copy("db/defaultDB.db", path[0])
                MessageBox.backupDB()
        except Exception as e:
            print (e)
    #END##########################################################################################################


    #Issue in case of error : https://stackoverflow.com/questions/52455774/googletrans-stopped-working-with-error-nonetype-object-has-no-attribute-group
    #Try : pip install googletrans==4.0.0-rc1
    def translate(self):
        try:
            inputEnglish = self.inputText.text()                                        #รับค่าแป้นพิมพ์เข้ามาที่ Textbox

            if self.selectBox.currentText() == "Thai":
                translatorTH = Translator(service_urls=['translate.google.co.th'])      #สร้างตัวแปรนำข้อความ input เข้าไปทำงาน
                resultTH = translatorTH.translate(inputEnglish, src="en", dest="th")    #กำหนดภาษาที่แปลออกเป็นภาษาไทย
                self.translateText.setPlainText("")                                     #กำหนดช่อง result ให้ว่างก่อนแสดงคำถัดไป
                self.translateText.appendPlainText(resultTH.text)                       #แสดงช่อง result
                self.dbSaving()

            if self.selectBox.currentText() == "Japanese":
                translatorJP = Translator(service_urls=['translate.google.co.jp'])
                resultJP = translatorJP.translate(inputEnglish, src="en", dest="ja")
                self.translateText.setPlainText("")
                self.translateText.appendPlainText(resultJP.text)
                self.dbSaving()

        #ในกรณีที่ไม่ใส่ input หรือไม่เชื่อมต่อ internet
        except Exception as e:
            print (e)
            MessageBox.noInternet()

    #ส่วนติดต่อฐานข้อมูล
    def dbSaving(self):
        if self.inputText.text() == self.translateText.toPlainText():                   #ตรวจสอบถ้าคำที่ใส่ไม่มีความหมาย
            MessageBox.noMeaning()

        else:
            dated = self.dateEdit.text()
            inputEnglish = self.inputText.text()
            result = self.translateText.toPlainText()
            connection = sqlite3.connect("db/defaultDB.db")
            connection.cursor()
            data_insert = """INSERT INTO History (Date, English, Translated)
                             VALUES (?, ?, ?)"""
            data = (dated, inputEnglish, result)
            connection.execute(data_insert, data)
            connection.commit()
            connection.close()

            self.defaultData()  #นำ function defaultData มาทำงานต่อ
    #END##########################################################################################################


    #แสดง database ในตาราง
    #Code From Youtube Tutorial 'PyQt : Show Data Into QTableWidget From Database. Ssj6 Channel'
    def defaultData(self): 
        connection = sqlite3.connect("db/defaultDB.db")
        query = "SELECT * FROM History"
        result = connection.execute(query)
        self.tableWidget.setRowCount(0)

        for row_number, row_data in enumerate(result):
            self.tableWidget.insertRow(row_number)
            for column_number, column_data in enumerate(row_data):
                self.tableWidget.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(column_data)))

        header = ["id", "Date", "English", "Translated"]
        self.tableWidget.setHorizontalHeaderLabels(header)
        self.status.setText("Reading File : db/defaultDB.db")
        connection.close()
        #QtCore.QTimer.singleShot(10000, self.defaultData)   #Refresh Data every 10 sec.
    #END##########################################################################################################


    #Tutorial : https://www.youtube.com/watch?v=55kQL-42Nzo
    def exportExcel(self):
        xlApp = win32.Dispatch("Excel.Application")
        xlApp.Visible = True

        #Create a new excel workbook
        wb = xlApp.Workbooks.Add()

        #Create a new excel worksheet
        ws = wb.worksheets.add
        ws.name = "Record Data"

        rows = []
        columnheaders = []

        #Retrieve columns lable
        try:
            for j in range(self.tableWidget.model().columnCount()):
                columnheaders.append(self.tableWidget.horizontalHeaderItem(j).text())

        #Retrieve table content
            for row in range(self.tableWidget.rowCount()):
                record = []
                for col in range(self.tableWidget.columnCount()):
                    record.append(self.tableWidget.item(row, col).text())
                rows.append(record)

        #insert table content to Excel
            ws.Range(
                ws.cells(2, 1),
                ws.cells(len(rows)+1, len(columnheaders))
                ).value = rows

        #insert column labels to Excel
            ws.Range(
                ws.cells(1, 1),
                ws.cells(1, len(columnheaders))
                ).value = columnheaders

        except Exception as e:
            print (e)
            MessageBox.noData()
    #END##########################################################################################################



    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setMinimumSize(QtCore.QSize(800, 600))
        MainWindow.setMaximumSize(QtCore.QSize(800, 600))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("dict.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.translateButton = QtWidgets.QPushButton(self.centralwidget)
        self.translateButton.setGeometry(QtCore.QRect(500, 140, 121, 51))
        self.translateButton.setStyleSheet("font: 14pt \"Comic Sans MS\";\n"
"background-color: rgb(85, 170, 255);")
        self.translateButton.setObjectName("translateButton")
        self.dateEdit = QtWidgets.QDateEdit(self.centralwidget)
        self.dateEdit.setGeometry(QtCore.QRect(30, 340, 111, 31))
        self.dateEdit.setStyleSheet("font: 10pt \"Comic Sans MS\";")
        self.dateEdit.setObjectName("dateEdit")
        self.saveButton = QtWidgets.QPushButton(self.centralwidget)
        self.saveButton.setGeometry(QtCore.QRect(630, 340, 121, 51))
        self.saveButton.setStyleSheet("font: 14pt \"Comic Sans MS\";\n"
"background-color: rgb(0, 255, 127);")
        self.saveButton.setObjectName("saveButton")
        self.exportButton = QtWidgets.QPushButton(self.centralwidget)
        self.exportButton.setGeometry(QtCore.QRect(500, 400, 251, 51))
        self.exportButton.setStyleSheet("font: 14pt \"Comic Sans MS\";\n"
"background-color: rgb(0, 255, 127);")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icon/xlsxIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.exportButton.setIcon(icon1)
        self.exportButton.setIconSize(QtCore.QSize(34, 34))
        self.exportButton.setObjectName("exportButton")
        self.openButton = QtWidgets.QPushButton(self.centralwidget)
        self.openButton.setGeometry(QtCore.QRect(500, 340, 121, 51))
        self.openButton.setStyleSheet("font: 14pt \"Comic Sans MS\";\n"
"background-color: rgb(0, 255, 127);")
        self.openButton.setObjectName("openButton")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(30, 340, 441, 191))
        self.tableWidget.setRowCount(6)
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setObjectName("tableWidget")
        self.status = QtWidgets.QLabel(self.centralwidget)
        self.status.setGeometry(QtCore.QRect(30, 540, 381, 16))
        self.status.setStyleSheet("font: 10pt \"Comic Sans MS\";")
        self.status.setObjectName("status")
        self.inputText = QtWidgets.QLineEdit(self.centralwidget)
        self.inputText.setGeometry(QtCore.QRect(30, 140, 441, 51))
        self.inputText.setWhatsThis("")
        self.inputText.setStyleSheet("font: 16pt \"Comic Sans MS\";")
        self.inputText.setText("")
        self.inputText.setObjectName("inputText")
        self.translateText = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.translateText.setGeometry(QtCore.QRect(30, 230, 441, 51))
        self.translateText.setStyleSheet("font: 16pt \"Comic Sans MS\";\n"
"color: rgb(0, 170, 0);")
        self.translateText.setPlainText("")
        self.translateText.setObjectName("translateText")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(30, 120, 101, 21))
        self.label_5.setStyleSheet("font: 14pt \"Comic Sans MS\";")
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(30, 210, 101, 21))
        self.label_6.setStyleSheet("font: 14pt \"Comic Sans MS\";")
        self.label_6.setObjectName("label_6")
        self.clearButton = QtWidgets.QPushButton(self.centralwidget)
        self.clearButton.setGeometry(QtCore.QRect(630, 140, 121, 51))
        self.clearButton.setStyleSheet("font: 14pt \"Comic Sans MS\";\n"
"background-color: rgb(85, 170, 255);")
        self.clearButton.setObjectName("clearButton")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(130, 10, 641, 81))
        self.label_8.setStyleSheet("font: 22pt \"Comic Sans MS\";")
        self.label_8.setObjectName("label_8")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(430, 60, 331, 121))
        self.label.setStyleSheet("image: url(:/image/google.png);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(0, 0, 801, 101))
        self.label_11.setStyleSheet("background-color: qconicalgradient(cx:0, cy:0, angle:135, stop:0 rgba(255, 255, 0, 69), stop:0.375 rgba(255, 255, 0, 69), stop:0.423533 rgba(251, 255, 0, 145), stop:0.45 rgba(247, 255, 0, 208), stop:0.477581 rgba(255, 244, 71, 130), stop:0.518717 rgba(255, 218, 71, 130), stop:0.55 rgba(255, 255, 0, 255), stop:0.57754 rgba(255, 203, 0, 130), stop:0.625 rgba(255, 255, 0, 69), stop:1 rgba(255, 255, 0, 69));")
        self.label_11.setText("")
        self.label_11.setObjectName("label_11")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(10, 10, 131, 81))
        self.label_7.setStyleSheet("image: url(:/image/dict.png);")
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(540, 430, 161, 141))
        self.label_12.setStyleSheet("image: url(:/image/book.png);")
        self.label_12.setText("")
        self.label_12.setObjectName("label_12")
        self.historyButton = QtWidgets.QPushButton(self.centralwidget)
        self.historyButton.setGeometry(QtCore.QRect(30, 290, 91, 41))
        self.historyButton.setStyleSheet("font: 14pt \"Comic Sans MS\";\n"
"background-color: rgb(255, 255, 127);")
        self.historyButton.setObjectName("historyButton")
        self.selectBox = QtWidgets.QComboBox(self.centralwidget)
        self.selectBox.setGeometry(QtCore.QRect(500, 250, 131, 31))
        self.selectBox.setStyleSheet("font: 14pt \"Comic Sans MS\";")
        self.selectBox.setObjectName("selectBox")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("thai.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.selectBox.addItem(icon2, "")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("jap.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.selectBox.addItem(icon3, "")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(500, 220, 141, 31))
        self.label_9.setStyleSheet("font: 14pt \"Comic Sans MS\";")
        self.label_9.setObjectName("label_9")
        self.clearHistoryButton = QtWidgets.QPushButton(self.centralwidget)
        self.clearHistoryButton.setGeometry(QtCore.QRect(130, 290, 171, 41))
        self.clearHistoryButton.setStyleSheet("font: 14pt \"Comic Sans MS\";\n"
"background-color: rgb(255, 255, 127);")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icon/exitIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.clearHistoryButton.setIcon(icon4)
        self.clearHistoryButton.setIconSize(QtCore.QSize(24, 24))
        self.clearHistoryButton.setObjectName("clearHistoryButton")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(640, 60, 71, 31))
        self.label_2.setStyleSheet("image: url(:/image/thai.png);")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(670, 20, 71, 31))
        self.label_3.setStyleSheet("image: url(:/image/uk.png);")
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(690, 60, 91, 31))
        self.label_4.setStyleSheet("image: url(:/image/jap.png);")
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.dateEdit.raise_()
        self.label.raise_()
        self.label_11.raise_()
        self.label_8.raise_()
        self.translateButton.raise_()
        self.saveButton.raise_()
        self.exportButton.raise_()
        self.openButton.raise_()
        self.tableWidget.raise_()
        self.status.raise_()
        self.inputText.raise_()
        self.translateText.raise_()
        self.label_5.raise_()
        self.label_6.raise_()
        self.clearButton.raise_()
        self.label_7.raise_()
        self.label_12.raise_()
        self.historyButton.raise_()
        self.selectBox.raise_()
        self.label_9.raise_()
        self.clearHistoryButton.raise_()
        self.label_3.raise_()
        self.label_4.raise_()
        self.label_2.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuFiles = QtWidgets.QMenu(self.menubar)
        self.menuFiles.setObjectName("menuFiles")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionAbout = QtWidgets.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icon/AboutIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAbout.setIcon(icon5)
        self.actionAbout.setObjectName("actionAbout")
        self.actionNew = QtWidgets.QAction(MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("icon/NewIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionNew.setIcon(icon6)
        self.actionNew.setObjectName("actionNew")
        self.actionSave = QtWidgets.QAction(MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("icon/SaveIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSave.setIcon(icon7)
        self.actionSave.setObjectName("actionSave")
        self.actionExportExcel = QtWidgets.QAction(MainWindow)
        self.actionExportExcel.setIcon(icon1)
        self.actionExportExcel.setObjectName("actionExportExcel")
        self.actionOpen = QtWidgets.QAction(MainWindow)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("icon/openIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpen.setIcon(icon8)
        self.actionOpen.setObjectName("actionOpen")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionClear = QtWidgets.QAction(MainWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("icon/ClearIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClear.setIcon(icon9)
        self.actionClear.setObjectName("actionClear")
        self.actionTranslate = QtWidgets.QAction(MainWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("icon/translate.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionTranslate.setIcon(icon10)
        self.actionTranslate.setObjectName("actionTranslate")
        self.actionClearHistory = QtWidgets.QAction(MainWindow)
        self.actionClearHistory.setIcon(icon4)
        self.actionClearHistory.setObjectName("actionClearHistory")
        self.actionReleaseNote = QtWidgets.QAction(MainWindow)
        self.actionReleaseNote.setIcon(icon6)
        self.actionReleaseNote.setObjectName("actionReleaseNote")
        self.menuFiles.addAction(self.actionOpen)
        self.menuFiles.addAction(self.actionSave)
        self.menuFiles.addAction(self.actionExportExcel)
        self.menuFiles.addAction(self.actionExit)
        self.menuAbout.addAction(self.actionAbout)
        self.menuAbout.addAction(self.actionReleaseNote)
        self.menuEdit.addAction(self.actionClear)
        self.menuEdit.addAction(self.actionTranslate)
        self.menuEdit.addAction(self.actionClearHistory)
        self.menubar.addAction(self.menuFiles.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        self.retranslateUi(MainWindow)
        self.clearButton.clicked.connect(self.inputText.clear)
        self.clearButton.clicked.connect(self.translateText.clear)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.inputText, self.translateButton)
        MainWindow.setTabOrder(self.translateButton, self.clearButton)
        MainWindow.setTabOrder(self.clearButton, self.translateText)
        MainWindow.setTabOrder(self.translateText, self.dateEdit)
        MainWindow.setTabOrder(self.dateEdit, self.tableWidget)
        MainWindow.setTabOrder(self.tableWidget, self.openButton)
        MainWindow.setTabOrder(self.openButton, self.saveButton)
        MainWindow.setTabOrder(self.saveButton, self.exportButton)


        #SetDate
        self.dateEdit.setDateTime(QtCore.QDateTime.currentDateTime())
        self.dateEdit.setMaximumDate(QtCore.QDate(7999, 12, 28))
        self.dateEdit.setMaximumTime(QtCore.QTime(23, 59, 59))
        self.dateEdit.setCalendarPopup(True)
        self.dateEdit.dateChanged.connect(self.onDateChanged)

        #Menubar Action
        self.actionAbout.triggered.connect(self.showAbout)              #About
        self.actionExit.triggered.connect(self.showExit)                #Exit
        self.actionClear.triggered.connect(self.inputText.clear)        #clearInputText
        self.actionClear.triggered.connect(self.translateText.clear)    #clearTranslateText
        self.actionExportExcel.triggered.connect(self.exportExcel)      #ExportExcel
        self.actionTranslate.triggered.connect(self.translate)          #Translate
        self.actionOpen.triggered.connect(self.openData)                #Open
        self.actionSave.triggered.connect(self.saveData)                #Save
        self.actionClearHistory.triggered.connect(self.clearData)       #Clear History
        self.actionReleaseNote.triggered.connect(self.releaseNote)      #Release Note

        #Button Action
        self.historyButton.clicked.connect(self.defaultData)            #HistoryButton
        self.translateButton.clicked.connect(self.translate)            #TranslateButton
        self.exportButton.clicked.connect(self.exportExcel)             #ExportButton
        self.openButton.clicked.connect(self.openData)                  #OpenButton
        self.saveButton.clicked.connect(self.saveData)                  #SaveButton
        self.clearHistoryButton.clicked.connect(self.clearData)         #Clear History

    def showAbout(self):
        MessageBox.showAbout()
    def showExit(self):
        MessageBox.showExit()
    def onDateChanged(self, qDate):
        print('{0}/{1}/{2}'.format(qDate.day(), qDate.month(), qDate.year()))
    def clearData(self):
        MessageBox.clearData()
        QtCore.QTimer.singleShot(100, self.defaultData)   #Refresh Data every 10 sec.

    def releaseNote(self):  #Open Release Notes
        from releasenote import Ui_MainWindow
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Basic Translator v1.01"))
        self.translateButton.setText(_translate("MainWindow", "Translate"))
        self.saveButton.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">Backup Default Database</span></p></body></html>"))
        self.saveButton.setText(_translate("MainWindow", "Backup..."))
        self.exportButton.setText(_translate("MainWindow", "Export to Excel"))
        self.openButton.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">Open Selected Database</span></p></body></html>"))
        self.openButton.setText(_translate("MainWindow", "Open..."))
        self.status.setText(_translate("MainWindow", "Reading File : "))
        self.label_5.setText(_translate("MainWindow", "Enter Text"))
        self.label_6.setText(_translate("MainWindow", "Translation"))
        self.clearButton.setText(_translate("MainWindow", "Clear"))
        self.label_8.setText(_translate("MainWindow", "English to Thai, Japanese Translator"))
        self.historyButton.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">Load Default Database</span></p></body></html>"))
        self.historyButton.setText(_translate("MainWindow", "History"))
        self.selectBox.setItemText(0, _translate("MainWindow", "Thai"))
        self.selectBox.setItemText(1, _translate("MainWindow", "Japanese"))
        self.label_9.setText(_translate("MainWindow", "Select output"))
        self.clearHistoryButton.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">Delete all history in table</span></p></body></html>"))
        self.clearHistoryButton.setText(_translate("MainWindow", "Clear History"))
        self.menuFiles.setTitle(_translate("MainWindow", "Files"))
        self.menuAbout.setTitle(_translate("MainWindow", "Help"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionNew.setText(_translate("MainWindow", "New"))
        self.actionSave.setText(_translate("MainWindow", "Backup..."))
        self.actionExportExcel.setText(_translate("MainWindow", "Export to Excel"))
        self.actionOpen.setText(_translate("MainWindow", "Open..."))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionClear.setText(_translate("MainWindow", "Clear"))
        self.actionTranslate.setText(_translate("MainWindow", "Translate"))
        self.actionClearHistory.setText(_translate("MainWindow", "Clear History"))
        self.actionReleaseNote.setText(_translate("MainWindow", "Release Note"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
